# .github/workflows/ci.yml
#
# µ-UNIX (Avrix) Continuous-Integration pipeline
# ──────────────────────────────────────────────
# • Installs the AVR tool-chain via  ./setup.sh  (modern | legacy)
# • Configures an out-of-tree **cross** build for ATmega328P
# • Compiles firmware + host-side unit-tests
# • Executes the full test-suite (host tests auto-skip when cross-compiled)
# • Builds Doxygen + Sphinx documentation
# • Uploads   ▸ firmware images  (ELF + Intel-HEX)
#             ▸ HTML documentation  as workflow artefacts
#
#   NOTE: `setup.sh` will build `qemu-system-avr` from source when the
#         runner image lacks it, making the workflow completely self-hosting.

name: CI

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

env:
  # Compact Meson output in CI while still surfacing warnings
  MESON_PROGRESS_BAR: ninja

jobs:
  build:
    runs-on: ubuntu-latest          # 24.04 LTS runner image (2025-06)
    strategy:
      fail-fast: false
      matrix:
        config: [ modern, legacy ]  # modern = gcc-avr-14 , legacy = gcc-avr-7.3

    steps:
      # ── 0 · Checkout ────────────────────────────────────────────────────
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive

      # ── 1 · Tool-chain install ─────────────────────────────────────────
      - name: Install AVR tool-chain
        run: sudo ./setup.sh --${{ matrix.config }}

      # ── 2 · Meson configure (cross build) ──────────────────────────────
      - name: Configure Meson cross-build
        run: |
          if [[ "${{ matrix.config }}" == "legacy" ]]; then
              CROSS_FILE="cross/atmega328p_gcc7.cross"
              C_STD="c11"
          else
              CROSS_FILE="cross/atmega328p_gcc14.cross"
              C_STD="c23"
          fi

          meson setup build --wipe \
                --cross-file "${CROSS_FILE}" \
                -Dc_std="${C_STD}"

      # ── 3 · Compile ────────────────────────────────────────────────────
      - name: Compile targets
        run: meson compile -C build

      - name: Enforce size gate (-Dflash_limit)
        run: meson compile -C build size-gate

      # ── 4 · Test ───────────────────────────────────────────────────────
      - name: Run test-suite
        run: meson test -C build --print-errorlogs

      # ── 5 · Documentation ──────────────────────────────────────────────
      - name: Build documentation (Sphinx & Doxygen)
        run: meson compile -C build doc-doxygen doc-sphinx

      # ── 6 · Artefacts ──────────────────────────────────────────────────
      - name: Upload firmware images
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.config }}
          if-no-files-found: error
          path: |
            build/**/*.elf
            build/**/*.hex

      - name: Upload HTML documentation
        uses: actions/upload-artifact@v4
        with:
          name: docs-${{ matrix.config }}
          if-no-files-found: warn
          path: |
            build/docs/**           # Sphinx (meson target doc-sphinx)
            build/doxygen/html/**   # Doxygen (meson target doc-doxygen)

  static-analysis:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:24.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Install analysis tools
        run: |
          apt-get -qq update
          apt-get -yqq install gcc-avr avr-libc cppcheck clang-tidy

      - name: Run cppcheck
        run: cppcheck src include --enable=all --inconclusive --error-exitcode=1

      - name: Run clang-tidy
        run: |
          AVR_INC=$(realpath $(avr-gcc -print-file-name=include)/../../../../avr/include)
          for f in src/*.c; do
            clang-tidy "$f" --quiet --warnings-as-errors='*' -- \
              -target avr -mmcu=atmega328p -std=c23 -DF_CPU=16000000UL \
              -Iinclude -I"$AVR_INC"
          done
